@inherits Component<Messages.ViewModel>
@layout Layout

<nav style="--bs-breadcrumb-divider: '>';" class="bg-body-tertiary" aria-label="breadcrumb">
  <div class="d-flex justify-content-between">
    <ol class="breadcrumb p-3 mb-0 rounded-3">
      <li class="breadcrumb-item">
        <a class="link-body-emphasis fw-semibold" href="@Dashboard.Prefix/message-store">
          Stream Categories
        </a>
      </li>
      <li class="breadcrumb-item">
        <a class="link-body-emphasis fw-semibold" href="@Dashboard.Prefix/message-store/categories/@HttpUtility.UrlEncode(Model.Category)">
          @Model.Category
        </a>
      </li>
      <li class="breadcrumb-item active" aria-current="page">
        @Model.StreamName
      </li>
    </ol>
    <Paging ViewModel="Model"></Paging>
  </div>
</nav>

<div class="p-2">
  <table class="table table-striped">
    <thead>
    <tr>
      <th style="width: 22em;">Message ID</th>
      <th style="width: 10em;">Stream Position</th>
      <th>Type</th>
      <th style="width: 16em;">Timestamp</th>
    </tr>
    </thead>
    <tbody>
    @foreach(var message in Model.Messages)
    {
      <tr>
        <td>
          <a href="@Dashboard.Prefix/message-store/messages/@message.Id">@message.Id</a>
        </td>
        <td>@message.StreamPosition</td>
        <td>@message.Type</td>
        <td>
          <div class="timestamp">@message.Timestamp.ToString("O")</div>
        </td>
      </tr>
    }
    @if (Model.Messages.Count == 0)
    {
      <tr>
        <td colspan="4">
          No stream messages found.
        </td>
      </tr>
    }
    </tbody>
  </table>
</div>

@code {

  public static async Task<IResult> Get(
    string category,
    string streamName,
    string? query,
    int? page,
    int? pageSize,
    IDashboard dashboard,
    CancellationToken cancellationToken
  )
  {
    var decodedStreamName = HttpUtility.UrlDecode(streamName);
    var pageParameter = page.ToPageParameter();
    var pageSizeParameter = pageSize.ToPageSizeParameter();

    var result = await dashboard.MessageStore.GetStreamMessages(
      decodedStreamName,
      query,
      pageParameter,
      pageSizeParameter,
      cancellationToken
    );

    return Results.Extensions.Render<Messages>(
      new ViewModel(
        category,
        decodedStreamName,
        query,
        result.Messages,
        pageParameter,
        pageSizeParameter,
        result.TotalResults
      )
    );
  }

  public record ViewModel(
    string Category,
    string StreamName,
    string? Query,
    IReadOnlyList<GetStreamMessagesResult.Message> Messages,
    int Page,
    int PageSize,
    int TotalResults
  ) : IPagedViewModel
  {
    public string UrlTemplate => $"{Dashboard.Prefix}/message-store/categories/{HttpUtility.UrlEncode(Category)}/{HttpUtility.UrlEncode(StreamName)}?page={{0}}&pageSize={{1}}&query={{2}}";
  }

}
