@inherits Component<Message.ViewModel>
@layout LayoutWithoutSearch

<nav style="--bs-breadcrumb-divider: '>';" class="bg-body-tertiary" aria-label="breadcrumb">
  <div class="d-flex justify-content-between">
    <ol class="breadcrumb p-3 mb-0 rounded-3">
      <li class="breadcrumb-item">
        <a class="link-body-emphasis fw-semibold" href="@Dashboard.Prefix/message-store">
          Stream Categories
        </a>
      </li>
      <li class="breadcrumb-item">
        <a class="link-body-emphasis fw-semibold"
           href="@Dashboard.Prefix/message-store/categories/@HttpUtility.UrlEncode(Model.Message.Category)">
          @Model.Message.Category
        </a>
      </li>
      <li class="breadcrumb-item">
        <a class="link-body-emphasis fw-semibold"
           href="@Dashboard.Prefix/message-store/categories/@HttpUtility.UrlEncode(Model.Message.Category)/@HttpUtility.UrlEncode(Model.Message.StreamName)">
          @Model.Message.StreamName
        </a>
      </li>
      <li class="breadcrumb-item active" aria-current="page">
        @Model.Message.Id
      </li>
    </ol>
    <div class="m-2 d-flex align-items-start flex-nowrap">
      @{
        var previousLink = "#";
        var nextLink = "#";

        if (Model.Message.StreamPosition > 1)
        {
          previousLink = $"{Dashboard.Prefix}/message-store/streams/{HttpUtility.UrlEncode(Model.Message.StreamName)}/{Model.Message.StreamPosition - 1}";
        }

        if (Model.Message.StreamPosition < Model.Message.StreamVersion)
        {
          nextLink = $"{Dashboard.Prefix}/message-store/streams/{HttpUtility.UrlEncode(Model.Message.StreamName)}/{Model.Message.StreamPosition + 1}";
        }
      }
      <div class="pt-2 text-nowrap">@Model.Message.StreamPosition of @Model.Message.StreamVersion</div>
      <div>
        <a href="@previousLink" class="ms-2 btn btn-outline-secondary @(Model.Message.StreamPosition == 1 ? "disabled" : "")">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-left" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0"/>
          </svg>
        </a>
      </div>
      <div class="ms-1">
        <a href="@nextLink" class="btn btn-outline-secondary @(Model.Message.StreamPosition == Model.Message.StreamVersion ? "disabled" : "")">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708"/>
          </svg>
        </a>
      </div>
    </div>
  </div>
</nav>

<div class="row mt-4 mx-auto">
  <div class="col-sm-8 mb-3 mb-sm-0">
    <div class="card ms-2" style="max-height: 75vh">
      <div class="card-header d-flex justify-content-between align-items-center pe-2">
        <div>@Model.Message.Type</div>
        <div>
          <button id="copy-button" type="button" class="btn btn-sm btn-outline-secondary" data-bs-toggle="tooltip" data-bs-title="Copied to clipboard" data-bs-placement="top" data-bs-trigger="click">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-copy" viewBox="0 0 16 16">
              <path fill-rule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1z"></path>
            </svg>
          </button>
        </div>
      </div>
      <div class="card-body p-3" style="overflow-y: auto">
    <pre id="message">
@Model.Message.Data
    </pre>
      </div>
    </div>
  </div>
  <div class="col-sm-4">
    <div class="card me-2 mb-4" style="max-height: 75vh">
      <div class="card-header">
        Details
      </div>
      <ul class="list-group list-group-flush">
        <li class="list-group-item">Global Position: @Model.Message.GlobalPosition</li>
        <li class="list-group-item">Stream Position: @Model.Message.StreamPosition</li>
        <li class="list-group-item">Stream Version: @Model.Message.StreamVersion</li>
        <li class="list-group-item">Timestamp: <span class="timestamp">@Model.Message.Timestamp.ToString("O")</span></li>
      </ul>
    </div>
    <div class="card me-2" style="max-height: 75vh">
      <div class="card-header">
        Metadata
      </div>
      <ul class="list-group list-group-flush">
        @foreach (var item in Model.Message.Metadata)
        {
          switch (item.Key)
          {
            case MessageConstants.Metadata.CausationId:
              <li class="list-group-item">
                @MessageConstants.Metadata.CausationId: <a href="@Dashboard.Prefix/message-store/messages/@item.Value">@item.Value</a>
              </li>
              break;
            case MessageConstants.Metadata.CorrelationId:
              <li class="list-group-item">
                @MessageConstants.Metadata.CorrelationId: <a href="@Dashboard.Prefix/message-store/correlated-by/@item.Value">@item.Value</a>
              </li>
              break;
            default:
              <li class="list-group-item">
                @(item.Key): @item.Value
              </li>
              break;
          }
        }

        @if (Model.Message.Metadata.Count == 0)
        {
          <li class="list-group-item">Message does not contain metadata</li>
        }
      </ul>
    </div>
  </div>
</div>

<script>
  function renderMessage(message) {
    const messageData = JSON.parse(message.innerText);

    message.innerHTML = JSON.stringify(messageData, undefined, 4);
  }

  function configureCopyButton(message){
    const copyButton = document.getElementById("copy-button");
    const tooltip = bootstrap.Tooltip.getOrCreateInstance(copyButton);

    copyButton.addEventListener("click", () => {
      navigator.clipboard.writeText(message.innerHTML);

      tooltip.show();
    });

    copyButton.addEventListener("mouseout", () => {
      setTimeout(function(){
        tooltip.hide();
      }, 2000);
    });
  }

  (function() {
    const message = document.getElementById("message");

    renderMessage(message);

    configureCopyButton(message);
  })();
</script>

@code {

  public record ViewModel(GetMessageResult Message);

}
