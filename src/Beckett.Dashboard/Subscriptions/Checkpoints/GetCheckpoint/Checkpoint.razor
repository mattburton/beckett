@inherits Component<Checkpoint.ViewModel>
@layout LayoutWithoutSearch

<script type="text/javascript">
  document.body.addEventListener("retry_requested", function () {
    alert('Retry requested');
  });
  document.body.addEventListener("checkpoint_skipped", function () {
    alert('Checkpoint error skipped');
  });
  document.body.addEventListener("reservation_released", function () {
    alert('Checkpoint reservation released');
  });
</script>

<SubscriptionNavbar ActiveLink="SubscriptionNavbar.Links.None"/>

<div id="checkpoint-details"
     hx-get="@Dashboard.Prefix/subscriptions/checkpoints/@Model.Details.Id"
     hx-trigger="every 10s"
     hx-select="#checkpoint-details"
     hx-swap="outerHTML">
  <div class="card m-4">
    <div class="card-header">
      <div class="d-flex justify-content-between align-items-center">
        <div class="fs-4">
          @{
            var statusIndicator = Model.Details.Status switch
            {
              CheckpointStatus.Active => "text-bg-success",
              CheckpointStatus.Retry => "text-bg-warning",
              CheckpointStatus.Failed => "text-bg-danger",
              _ => throw new ArgumentOutOfRangeException()
            };
          }
          <span class="badge rounded-pill @statusIndicator p-2 me-1">
            <span class="visually-hidden">Status: @Model.Details.Status</span>
          </span>
          Checkpoint
        </div>
        @if (Model.Details.ShowControls)
        {
          <div>
            <button href="#"
                    class="btn btn-primary"
                    title="Request retry"
                    hx-post="@Dashboard.Prefix/subscriptions/checkpoints/@Model.Details.Id/retry"
                    hx-on::response-error="alert('Unable to retry checkpoint at this time - please try again later')">
              Retry
            </button>
            <button href="#"
                    class="btn btn-danger ms-1"
                    title="Skip checkpoint forward"
                    hx-post="@Dashboard.Prefix/subscriptions/checkpoints/@Model.Details.Id/skip"
                    hx-confirm="Are you sure you want to skip this error? The checkpoint will be reset and advanced to the next stream position if applicable - the current retry history will be lost if you continue."
                    hx-on::response-error="alert('Unable to skip checkpoint forward at this time - please try again later')">
              Skip
            </button>
            @if (Model.Details.ReservedUntil.HasValue)
            {
              <button href="#"
                      class="btn btn-danger ms-2"
                      title="Release checkpoint reservation"
                      hx-post="@Dashboard.Prefix/subscriptions/checkpoints/@Model.Details.Id/release-reservation"
                      hx-confirm="Are you sure you want to release the reservation? This is typically used to clear out orphaned checkpoint reservations after restarting the host, otherwise multiple workers trying to process the same checkpoint could lead to unintended consequences."
                      hx-on::response-error="alert('Unable to skip checkpoint forward at this time - please try again later')">
                Release
              </button>
            }
          </div>
        }
      </div>
    </div>
    <ul class="list-group list-group-flush">
      <li class="list-group-item">
        <span class="fw-bolder">Group Name:</span>
        @Model.Details.GroupName
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Name:</span>
        <a href="@Dashboard.Prefix/subscriptions/@Model.Details.GroupName/@Model.Details.Name">@Model.Details.Name</a>
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Status:</span>
        @Model.Details.Status
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Stream Name:</span>
        @if (Dashboard.Options.MessageStoreEnabled)
        {
          <a
            href="@Dashboard.Prefix/message-store/categories/@HttpUtility.UrlEncode(Model.Details.StreamCategory)/@HttpUtility.UrlEncode(Model.Details.StreamName)">
            @Model.Details.StreamName
          </a>
        }
        else
        {
          @Model.Details.StreamName
        }
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Stream Position:</span>
        @if (Dashboard.Options.MessageStoreEnabled)
        {
          <a
            href="@Dashboard.Prefix/message-store/streams/@HttpUtility.UrlEncode(Model.Details.StreamName)/@Model.Details.StreamPosition">
            @Model.Details.StreamPosition
          </a>
        }
        else
        {
          @Model.Details.StreamPosition
        }
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Stream Version:</span>
        @Model.Details.StreamVersion
      </li>
      @if (Model.Details.Status != CheckpointStatus.Active)
      {
        <li class="list-group-item">
          <span class="fw-bolder">Retry Attempts:</span>
          @Model.Details.TotalAttempts
        </li>
      }
      @if (Model.Details.ProcessAt.HasValue)
      {
        <li class="list-group-item">
          <span class="fw-bolder">
            @if (Model.Details.Status == CheckpointStatus.Active)
            {
              <text>Process In:</text>
            }
            else
            {
              <text>Retry In:</text>
            }
          </span>
          @Model.Details.ProcessAt.Value.ToFriendlyTimeDisplay()
        </li>
      }
      @if (Model.Details.ReservedUntil.HasValue)
      {
        <li class="list-group-item">
          <span class="fw-bolder">
            Reserved For:
          </span>
          @Model.Details.ReservedUntil.Value.ToFriendlyTimeDisplay()
        </li>
      }
    </ul>
  </div>

  @foreach (var retry in Model.Details.Retries.OrderByDescending(x => x.Timestamp))
  {
    <div class="card m-4">
      <div class="card-header d-flex justify-content-between align-items-center bg-danger bg-opacity-10 text-body">
        <div>
          @if (retry.Attempt == 0)
          {
            <text>Original Error</text>
          }
          else
          {
            <text>Retried</text>
          }
        </div>
        <div>@retry.Timestamp</div>
      </div>
      <div class="card-body">
        <ErrorDetails Exception="retry.GetException()" First="true"></ErrorDetails>
      </div>
    </div>
  }
</div>

@code {

  public record ViewModel(GetCheckpointResult Details);

}
