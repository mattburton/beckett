@using System.Web
@using Beckett.Subscriptions
@inherits HtmlTemplate<CheckpointPage.ViewModel>

@{
  Layout = new Layout();
}

<script type="text/javascript">
  document.body.addEventListener("retry_requested", function(){
    alert('Retry requested');
  });
</script>

<div class="p-2 bg-body-tertiary">
  <ul class="nav nav-pills">
    <li class="nav-item">
      <a class="nav-link" href="@Routes.Prefix/subscriptions">Subscriptions</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="@Routes.Prefix/subscriptions/lagging">Lagging</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="@Routes.Prefix/subscriptions/retries">Retries</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="@Routes.Prefix/subscriptions/failed">Failed</a>
    </li>
  </ul>
</div>

<div id="checkpoint-details"
     hx-get="@Routes.Prefix/subscriptions/checkpoints/@Model.Details.Id"
     hx-trigger="every 10s"
     hx-select="#checkpoint-details"
     hx-swap="outerHTML">
  <div class="card m-4">
    <div class="card-header">
      <div class="d-flex justify-content-between align-items-center">
        <div class="fs-4">
          Checkpoint
          @switch (Model.Details.Status)
          {
            case CheckpointStatus.Active:
              <span class="badge text-bg-success">@Model.Details.Status</span>
              break;
            case CheckpointStatus.Retry:
              <span class="badge text-bg-warning">@Model.Details.Status</span>
              break;
            case CheckpointStatus.Failed:
              <span class="badge text-bg-danger">@Model.Details.Status</span>
              break;
          }
        </div>
        @if (Model.Details.ShowControls)
        {
          <div>
            <a href="#"
               class="btn btn-primary"
               title="Request retry"
               hx-post="@Routes.Prefix/subscriptions/checkpoints/@Model.Details.Id/retry"
               hx-on::response-error="alert('Unable to retry checkpoint at this time - please try again later')">
              Retry
            </a>
          </div>
        }
      </div>
    </div>
    <ul class="list-group list-group-flush">
      <li class="list-group-item">
        <span class="fw-bolder">Group Name:</span>
        @Model.Details.GroupName
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Name:</span>
        <a href="@Routes.Prefix/subscriptions/@Model.Details.GroupName/@Model.Details.Name">@Model.Details.Name</a>
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Status:</span>
        @Model.Details.Status
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Stream Name:</span>
        @if (Routes.Options.MessageStoreEnabled)
        {
          <a href="@Routes.Prefix/message-store/categories/@HttpUtility.UrlEncode(Model.Details.StreamCategory)/@HttpUtility.UrlEncode(Model.Details.StreamName)">
            @Model.Details.StreamName
          </a>
        }
        else
        {
          @Model.Details.StreamName
        }
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Stream Version:</span>
        @Model.Details.StreamVersion
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Stream Position:</span>
        @if (Routes.Options.MessageStoreEnabled)
        {
          <a href="@Routes.Prefix/message-store/streams/@HttpUtility.UrlEncode(Model.Details.StreamName)/@Model.Details.StreamPosition">
            @Model.Details.StreamPosition
          </a>
        }
        else
        {
          @Model.Details.StreamPosition
        }
      </li>
      @if (Model.Details.Status != CheckpointStatus.Active)
      {
        <li class="list-group-item">
          <span class="fw-bolder">Retry Attempts:</span>
          @Model.Details.TotalAttempts
        </li>
      }
      @if (Model.Details.ProcessAt.HasValue)
      {
        <li class="list-group-item">
          <span class="fw-bolder">Retry In:</span>
          @Model.Details.ProcessAt.Value.ToFriendlyTimeDisplay()
        </li>
      }
    </ul>
  </div>

  @foreach(var retry in Model.Details.Retries.OrderByDescending(x => x.Timestamp))
  {
    <div class="card m-4">
      <div class="card-header d-flex justify-content-between align-items-center bg-danger bg-opacity-10 text-body">
        <div>
          @if (retry.Attempt == 0)
          {
            <text>Original Error</text>
          }
          else
          {
            <text>Retried</text>
          }
        </div>
        <div>@retry.Timestamp</div>
      </div>
      <div class="card-body">
        @(new Exception((retry.GetException(), true)))
      </div>
    </div>
  }
</div>
