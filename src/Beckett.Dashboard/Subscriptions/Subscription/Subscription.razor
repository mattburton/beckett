
@inherits Component<Subscription.ViewModel>
@layout LayoutWithoutSearch

<SubscriptionNavbar ActiveLink="SubscriptionNavbar.Links.Subscriptions"/>

<script type="text/javascript">
  document.body.addEventListener("subscription_replay_started", function () {
    alert('Subscription replay started successfully');
  });
  document.body.addEventListener("subscription_reset", function () {
    alert('Subscription reset successfully');
  });
</script>

<nav style="--bs-breadcrumb-divider: '>';" class="bg-body-tertiary mt-2" aria-label="breadcrumb">
  <div class="d-flex justify-content-between">
    <ol class="breadcrumb p-3 mb-0 rounded-3">
      <li class="breadcrumb-item">
        <a class="link-body-emphasis fw-semibold" href="@Dashboard.Prefix/subscriptions">
          Groups
        </a>
      </li>
      <li class="breadcrumb-item" aria-current="page">
        <a class="link-body-emphasis fw-semibold" href="@Dashboard.Prefix/subscriptions/@Model.Details.GroupName">
          @Model.Details.GroupName
        </a>
      </li>
      <li class="breadcrumb-item active" aria-current="page">
        @Model.Details.SubscriptionName
      </li>
    </ol>
  </div>
</nav>

<div id="subscription-details"
     hx-get="@Dashboard.Prefix/subscriptions/@Model.Details.GroupName/@Model.Details.SubscriptionName"
     hx-trigger="every 10s"
     hx-select="#subscription-details"
     hx-swap="outerHTML">
  <div class="card m-2">
    <div class="card-header">
      <div class="d-flex justify-content-between align-items-center">
        <div class="fs-4">
          @{
            var statusIndicator = Model.Details.Status switch
            {
              "active" => "text-bg-success",
              "paused" => "text-bg-secondary",
              "replay" => "text-bg-danger",
              "uninitialized" => "text-bg-warning",
              _ => "text-bg-warning"
            };
          }
          <span class="badge rounded-pill @statusIndicator p-2 me-1">
            <span class="visually-hidden">Status: @Model.Details.Status</span>
          </span>
          Subscription
        </div>
        <div>
          @if (Model.Details.Status == "active")
          {
            <button class="btn btn-primary"
                    title="Pause Subscription"
                    hx-post="@Dashboard.Prefix/subscriptions/@Model.Details.GroupName/@Model.Details.SubscriptionName/pause"
                    hx-on::response-error="alert('Unable to pause subscription at this time - please try again later')">
              Pause
            </button>
          }
          @if (Model.Details.Status == "paused")
          {
            <button class="btn btn-primary"
                    title="Resume Subscription"
                    hx-post="@Dashboard.Prefix/subscriptions/@Model.Details.GroupName/@Model.Details.SubscriptionName/resume"
                    hx-on::response-error="alert('Unable to resume subscription at this time - please try again later')">
              Resume
            </button>
          }
          @if (Model.Details.Status != "replay")
          {
            <button class="btn btn-danger ms-2"
                    title="Replay Subscription"
                    hx-post="@Dashboard.Prefix/subscriptions/@Model.Details.GroupName/@Model.Details.SubscriptionName/replay"
                    hx-confirm="Are you sure you want to replay this subscription?"
                    hx-on::response-error="alert('Unable to replay subscription at this time - please try again later')">
              Replay
            </button>
          }
          @if (Model.Details.Status != "uninitialized")
          {
            <button class="btn btn-danger ms-2"
                    title="Reset Subscription"
                    hx-post="@Dashboard.Prefix/subscriptions/@Model.Details.GroupName/@Model.Details.SubscriptionName/reset"
                    hx-confirm="Are you sure you want to reset this subscription?"
                    hx-on::response-error="alert('Unable to reset subscription at this time - please try again later')">
              Reset
            </button>
          }
        </div>
      </div>
    </div>
    <ul class="list-group list-group-flush">
      <li class="list-group-item"><span class="fw-bolder">Group Name:</span> @Model.Details.GroupName</li>
      <li class="list-group-item"><span class="fw-bolder">Name:</span> @Model.Details.SubscriptionName</li>
      <li class="list-group-item"><span class="fw-bolder">Status:</span> @Model.Details.Status</li>
      <li class="list-group-item"><span class="fw-bolder">Priority:</span> @Model.Details.Priority</li>
      <li class="list-group-item"><span class="fw-bolder">Skip During Replay:</span> @(Model.Details.SkipDuringReplay ? "Yes" : "No")</li>

      @if (!string.IsNullOrEmpty(Model.Details.Category))
      {
        <li class="list-group-item"><span class="fw-bolder">Category:</span> @Model.Details.Category</li>
      }

      @if (!string.IsNullOrEmpty(Model.Details.StreamName))
      {
        <li class="list-group-item"><span class="fw-bolder">Stream Name:</span> @Model.Details.StreamName</li>
      }

      @if (Model.Details.MessageTypes.Length > 0)
      {
        <li class="list-group-item">
          <span class="fw-bolder">Message Types:</span>
          <ul class="list-unstyled ms-3 mt-1 mb-0">
            @foreach (var messageType in Model.Details.MessageTypes)
            {
              <li><code>@messageType</code></li>
            }
          </ul>
        </li>
      }

      @if (Model.Details.ReplayTargetPosition.HasValue)
      {
        <li class="list-group-item">
          <span class="fw-bolder">Replay Target Position:</span>
          @Model.Details.ReplayTargetPosition.Value
        </li>
      }

      <li class="list-group-item">
        <span class="fw-bolder">Checkpoints:</span>
      </li>
      <li class="list-group-item ps-5">
        <span class="fw-bolder">Active:</span>
        @Model.Details.ActiveCheckpoints
      </li>
      <li class="list-group-item ps-5">
        <span class="fw-bolder">Lagging:</span>
        @Model.Details.LaggingCheckpoints
      </li>
      <li class="list-group-item ps-5">
        <span class="fw-bolder">Retry:</span>
        @Model.Details.RetryCheckpoints
      </li>
      <li class="list-group-item ps-5">
        <span class="fw-bolder">Failed:</span>
        @Model.Details.FailedCheckpoints
      </li>
    </ul>
  </div>
</div>

@code {

  public record ViewModel(SubscriptionQuery.Result Details);

}
