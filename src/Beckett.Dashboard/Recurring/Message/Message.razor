@using Beckett.Database.Models
@using System.Text.Json
@inherits Component<Message.ViewModel>
@layout Layout

<script type="text/javascript">
  document.body.addEventListener("recurring_message_sent", function () {
    alert('Recurring message sent successfully');
  });
</script>

<nav style="--bs-breadcrumb-divider: '>';" class="bg-body-tertiary" aria-label="breadcrumb">
  <div class="d-flex justify-content-between">
    <ol class="breadcrumb p-3 mb-0 rounded-3">
      <li class="breadcrumb-item">
        <a class="link-body-emphasis fw-semibold" href="@Dashboard.Prefix/recurring">
          Recurring Messages
        </a>
      </li>
      <li class="breadcrumb-item active" aria-current="page">
        @Model.Name
      </li>
    </ol>
  </div>
</nav>

<div id="recurring-message-details"
     hx-get="@Dashboard.Prefix/recurring/@HttpUtility.UrlEncode(Model.Name)"
     hx-trigger="every 10s"
     hx-select="#recurring-message-details"
     hx-swap="outerHTML">
  <div class="card m-4">
    <div class="card-header">
      <div class="d-flex justify-content-between align-items-center">
        <div class="fs-4">
          Recurring Message
        </div>
        <div>
          <button class="btn btn-success"
                  title="Send recurring message now"
                  hx-post="@Dashboard.Prefix/recurring/@HttpUtility.UrlEncode(Model.Name)/send"
                  hx-on::response-error="alert('Unable to send recurring message at this time - please try again later')">
            Send Now
          </button>
        </div>
      </div>
    </div>
    <ul class="list-group list-group-flush">
      <li class="list-group-item">
        <span class="fw-bolder">Name:</span>
        @Model.Name
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Stream Name:</span>
        @Model.StreamName
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Type:</span>
        @Model.Type
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">Cron Expression:</span>
        <code>@Model.CronExpression</code>
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">
          Next Occurrence:
        </span>
        @if (Model.NextOccurrence.HasValue)
        {
          <span class="timestamp">@Model.NextOccurrence.Value.ToString("O")</span>
        }
        else
        {
          <span class="text-muted">Not scheduled</span>
        }
      </li>
      <li class="list-group-item">
        <span class="fw-bolder">
          Created:
        </span>
        <span class="timestamp">@Model.Timestamp.ToString("O")</span>
      </li>
    </ul>
  </div>
</div>

<div class="row mt-4 mx-auto">
  <div class="col-sm-8 mb-3 mb-sm-0">
    <div class="card ms-2" style="max-height: 75vh">
      <div class="card-header d-flex justify-content-between align-items-center pe-2">
        <div>Data</div>
        <div>
          <button id="copy-button"
                  type="button"
                  class="btn btn-sm btn-outline-secondary"
                  data-bs-toggle="tooltip"
                  data-bs-title="Copied to clipboard"
                  data-bs-placement="top"
                  data-bs-trigger="click">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-copy"
                 viewBox="0 0 16 16">
              <path fill-rule="evenodd"
                    d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1z"></path>
            </svg>
          </button>
        </div>
      </div>
      <div class="card-body p-3" style="overflow-y: auto">
    <pre id="message">
@Model.Data
    </pre>
      </div>
    </div>
  </div>
  <div class="col-sm-4">
    <div class="card me-2" style="max-height: 75vh">
      <div class="card-header">
        <div class="my-1">Metadata</div>
      </div>
      <ul class="list-group list-group-flush">
        @foreach (var item in Model.Metadata.OrderBy(x => x.Key))
        {
          switch (item.Key)
          {
            case MessageConstants.Metadata.CausationId:
              <li class="list-group-item">
                @MessageConstants.Metadata.CausationId: <a
                  href="@Dashboard.Prefix/message-store/messages/@item.Value">@item.Value</a>
              </li>
              break;
            case MessageConstants.Metadata.CorrelationId:
              <li class="list-group-item">
                @MessageConstants.Metadata.CorrelationId: <a
                  href="@Dashboard.Prefix/message-store/correlated-by/@item.Value">@item.Value</a>
              </li>
              break;
            default:
              <li class="list-group-item">
                @(item.Key): @item.Value
              </li>
              break;
          }
        }

        @if (Model.Metadata.Count == 0)
        {
          <li class="list-group-item">Message does not contain metadata</li>
        }
      </ul>
    </div>
  </div>
</div>

<script>
  function renderMessage(message) {
    const messageData = JSON.parse(message.innerText);

    message.innerHTML = JSON.stringify(messageData, undefined, 4);
  }

  function configureCopyButton(message) {
    const copyButton = document.getElementById("copy-button");
    const tooltip = bootstrap.Tooltip.getOrCreateInstance(copyButton);

    copyButton.addEventListener("click", () => {
      navigator.clipboard.writeText(message.innerHTML);

      tooltip.show();
    });

    copyButton.addEventListener("mouseout", () => {
      setTimeout(function () {
        tooltip.hide();
      }, 2000);
    });
  }

  (function () {
    const message = document.getElementById("message");

    renderMessage(message);

    configureCopyButton(message);
  })();
</script>

@code {

  public record ViewModel(PostgresRecurringMessage RecurringMessage)
  {
    public string Name => RecurringMessage.Name;
    public string StreamName => RecurringMessage.StreamName;
    public string Type => RecurringMessage.Type;
    public string CronExpression => RecurringMessage.CronExpression;
    public DateTimeOffset? NextOccurrence => RecurringMessage.NextOccurrence;
    public DateTimeOffset Timestamp => RecurringMessage.Timestamp;
    public string Data => JsonSerializer.Serialize(RecurringMessage.Data, new JsonSerializerOptions { WriteIndented = true });
    public Dictionary<string, string> Metadata => RecurringMessage.Metadata.ToMetadataDictionary();
  }

}
